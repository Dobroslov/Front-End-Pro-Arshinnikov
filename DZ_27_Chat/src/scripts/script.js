const url = 'wss://fep-app.herokuapp.com/';

const inputName = document.getElementById('input-name');
const inputText = document.getElementById('input-text');
const submitBtn = document.getElementById('submit-btn');
const listMessages = document.getElementById('window-list-messages');

function initConnection() {
  let socket = new WebSocket(url);
  submitBtn.addEventListener('click', onBtnSubmitNewMessage);
  socket.onopen = function () {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const startMessege = (message = {
      type: 'userLogIn',
      payload: { user: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', message: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É' },
    });
    console.log('[open] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    sendMessage(startMessege);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
  };

  socket.onmessage = (msg) => {
    console.log(`[message] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞: ${msg.data}`, msg);
    const incomingMessage = JSON.parse(msg.data);
    console.log('üöÄ ~ initConnection ~ incomingMessage', incomingMessage);

    renderMessage(incomingMessage);
  };

  socket.onclose = function (event) {
    // –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (event.wasClean) {
      const exitMessage = (message = {
        type: 'userLogOut',
        payload: { user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', message: '–≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞' },
      });
      renderMessage(exitMessage);
      console.log(
        `[close] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–∏—Å—Ç–æ, –∫–æ–¥=${event.code} –ø—Ä–∏—á–∏–Ω–∞=${event.reason}`
      );
    } else {
      const exitMessage = (message = {
        type: 'userLogOut',
        payload: { user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', message: '–≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞' },
      });
      renderMessage(exitMessage);
      console.log(`[close] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ`);
      initConnection();
    }
  };

  socket.onerror = function (err) {
    console.log(`[error] ${err.message}`);
  };

  function sendMessage(message) {
    if (socket.readyState === WebSocket.OPEN)
      socket.send(JSON.stringify(message));
  }

  function onBtnSubmitNewMessage() {
    const newMessage = getFormDate();
    if (isInputValue(inputName.value, inputText.value)) {
      sendMessage(newMessage);
      resetFormMessage();
    }
  }

  function isInputValue(user, message) {
    return user.trim() !== '' && message.trim() !== '';
  }

  function getFormDate() {
    return (message = {
      type: 'userMessage',
      payload: { user: inputName.value, message: inputText.value },
    });
  }

  function renderMessage(newMessageObj) {
    return listMessages.insertAdjacentHTML(
      'beforeend',
      `
    <p>
      ${newMessageObj.payload.user}: <span class="text">${newMessageObj.payload.message}</span>
    </p>`
    );
  }

  function resetFormMessage() {
    inputText.value = '';
  }
}

initConnection();
